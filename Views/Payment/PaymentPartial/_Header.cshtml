@using Matterix.Services
@model InitiatedOrder
@inject CourseService Course
@{
    var course = Course.GetCourse(Model.CourseId);
}

<div class="text-center un-select">
@switch (Model.Reason)
{
    
    case EnumList.PaymentReason.Register:
        
        <div class="font-cairo matterix-color title-1-5 mb-2">{{$t('message.youAreRegisteringInThisCourse')}}</div>
        <div><span class="display-4 title-1-0"><a class="matterix-link" target="_blank" asp-controller="Course" asp-action="CourseArea" asp-route-courseId="@course.Id">@course.Subject / @course.Code</a></span></div>
        
        break;
    case EnumList.PaymentReason.Invoice:
        <div class="font-cairo matterix-color title-1-5 mb-2">{{$t('message.youAreNowPayingThisInvoice')}}</div>
        <div><span class="display-4 title-1-0">{{$t('message.invoiceNumber')}}: <a class="matterix-link" target="_blank" asp-controller="Invoice" asp-action="Index" asp-route-invoiceNumber="@Model.InvoiceNumber">@Model.InvoiceNumber</a></span></div>
    
        break;
    case EnumList.PaymentReason.Empty:
    case EnumList.PaymentReason.Donate:
    case EnumList.PaymentReason.Other:
    default:
        throw new ArgumentOutOfRangeException();
}

</div>